{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'/api';// Create axios instance with default config\nconst apiClient=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add token to requests if available\napiClient.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// Handle token expiration\napiClient.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});export const statsService={// Get user's statistics\nasync getUserStats(){const response=await apiClient.get('/stats/my-stats');return response.data;},// Get user's recent games\nasync getRecentGames(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const response=await apiClient.get(`/stats/recent-games?limit=${limit}`);return response.data;},// Get global leaderboard\nasync getLeaderboard(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const response=await apiClient.get(`/stats/leaderboard?limit=${limit}`);return response.data;},// Get detailed statistics\nasync getDetailedStats(){const response=await apiClient.get('/stats/detailed-stats');return response.data;},// Helper function to format win percentage\nformatWinPercentage(percentage){return`${percentage.toFixed(1)}%`;},// Helper function to get game result text\ngetGameResultText(result){switch(result){case'win':return'Won';case'loss':return'Lost';case'draw':return'Draw';default:return'Unknown';}},// Helper function to get game result color\ngetGameResultColor(result){switch(result){case'win':return'#28a745';case'loss':return'#dc3545';case'draw':return'#ffc107';default:return'#6c757d';}},// Helper function to format date\nformatDate(dateString){const date=new Date(dateString);return date.toLocaleDateString('en-US',{year:'numeric',month:'short',day:'numeric',hour:'2-digit',minute:'2-digit'});}};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","statsService","getUserStats","get","data","getRecentGames","limit","arguments","length","undefined","getLeaderboard","getDetailedStats","formatWinPercentage","percentage","toFixed","getGameResultText","result","getGameResultColor","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute"],"sources":["/Users/yousuf/Downloads/tic-tac-toe-engine/react-web-app/src/services/statsService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if available\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Handle token expiration\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const statsService = {\n  // Get user's statistics\n  async getUserStats() {\n    const response = await apiClient.get('/stats/my-stats');\n    return response.data;\n  },\n\n  // Get user's recent games\n  async getRecentGames(limit = 10) {\n    const response = await apiClient.get(`/stats/recent-games?limit=${limit}`);\n    return response.data;\n  },\n\n  // Get global leaderboard\n  async getLeaderboard(limit = 10) {\n    const response = await apiClient.get(`/stats/leaderboard?limit=${limit}`);\n    return response.data;\n  },\n\n  // Get detailed statistics\n  async getDetailedStats() {\n    const response = await apiClient.get('/stats/detailed-stats');\n    return response.data;\n  },\n\n  // Helper function to format win percentage\n  formatWinPercentage(percentage) {\n    return `${percentage.toFixed(1)}%`;\n  },\n\n  // Helper function to get game result text\n  getGameResultText(result) {\n    switch (result) {\n      case 'win':\n        return 'Won';\n      case 'loss':\n        return 'Lost';\n      case 'draw':\n        return 'Draw';\n      default:\n        return 'Unknown';\n    }\n  },\n\n  // Helper function to get game result color\n  getGameResultColor(result) {\n    switch (result) {\n      case 'win':\n        return '#28a745';\n      case 'loss':\n        return '#dc3545';\n      case 'draw':\n        return '#ffc107';\n      default:\n        return '#6c757d';\n    }\n  },\n\n  // Helper function to format date\n  formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}