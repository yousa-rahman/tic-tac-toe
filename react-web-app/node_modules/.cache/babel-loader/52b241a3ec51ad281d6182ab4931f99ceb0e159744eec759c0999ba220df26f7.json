{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle token expiration\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  // Register a new user\n  async register(userData) {\n    const response = await apiClient.post('/auth/register', userData);\n    return response.data;\n  },\n  // Login user\n  async login(credentials) {\n    const response = await apiClient.post('/auth/login', credentials);\n    return response.data;\n  },\n  // Verify JWT token\n  async verifyToken(token) {\n    const response = await apiClient.get('/auth/verify', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  },\n  // Logout user (client-side only)\n  logout() {\n    localStorage.removeItem('token');\n  },\n  // Get current token\n  getToken() {\n    return localStorage.getItem('token');\n  },\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","register","userData","post","data","login","credentials","verifyToken","get","logout","getToken","isAuthenticated"],"sources":["/Users/yousuf/Downloads/tic-tac-toe-engine/react-web-app/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if available\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Handle token expiration\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authService = {\n  // Register a new user\n  async register(userData) {\n    const response = await apiClient.post('/auth/register', userData);\n    return response.data;\n  },\n\n  // Login user\n  async login(credentials) {\n    const response = await apiClient.post('/auth/login', credentials);\n    return response.data;\n  },\n\n  // Verify JWT token\n  async verifyToken(token) {\n    const response = await apiClient.get('/auth/verify', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  },\n\n  // Logout user (client-side only)\n  logout() {\n    localStorage.removeItem('token');\n  },\n\n  // Get current token\n  getToken() {\n    return localStorage.getItem('token');\n  },\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  },\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;;AAE5D;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,SAAS,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMU,WAAW,GAAG;EACzB;EACA,MAAMC,QAAQA,CAACC,QAAQ,EAAE;IACvB,MAAMT,QAAQ,GAAG,MAAMf,SAAS,CAACyB,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;IACjE,OAAOT,QAAQ,CAACW,IAAI;EACtB,CAAC;EAED;EACA,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,MAAMb,QAAQ,GAAG,MAAMf,SAAS,CAACyB,IAAI,CAAC,aAAa,EAAEG,WAAW,CAAC;IACjE,OAAOb,QAAQ,CAACW,IAAI;EACtB,CAAC;EAED;EACA,MAAMG,WAAWA,CAACrB,KAAK,EAAE;IACvB,MAAMO,QAAQ,GAAG,MAAMf,SAAS,CAAC8B,GAAG,CAAC,cAAc,EAAE;MACnD3B,OAAO,EAAE;QACPQ,aAAa,EAAE,UAAUH,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOO,QAAQ,CAACW,IAAI;EACtB,CAAC;EAED;EACAK,MAAMA,CAAA,EAAG;IACPtB,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED;EACAc,QAAQA,CAAA,EAAG;IACT,OAAOvB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC,CAAC;EAED;EACAuB,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAACxB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}