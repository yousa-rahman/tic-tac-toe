{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle token expiration\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const statsService = {\n  // Get user's statistics\n  async getUserStats() {\n    const response = await apiClient.get('/stats/my-stats');\n    return response.data;\n  },\n  // Get user's recent games\n  async getRecentGames(limit = 10) {\n    const response = await apiClient.get(`/stats/recent-games?limit=${limit}`);\n    return response.data;\n  },\n  // Get global leaderboard\n  async getLeaderboard(limit = 10) {\n    const response = await apiClient.get(`/stats/leaderboard?limit=${limit}`);\n    return response.data;\n  },\n  // Get detailed statistics\n  async getDetailedStats() {\n    const response = await apiClient.get('/stats/detailed-stats');\n    return response.data;\n  },\n  // Helper function to format win percentage\n  formatWinPercentage(percentage) {\n    return `${percentage.toFixed(1)}%`;\n  },\n  // Helper function to get game result text\n  getGameResultText(result) {\n    switch (result) {\n      case 'win':\n        return 'Won';\n      case 'loss':\n        return 'Lost';\n      case 'draw':\n        return 'Draw';\n      default:\n        return 'Unknown';\n    }\n  },\n  // Helper function to get game result color\n  getGameResultColor(result) {\n    switch (result) {\n      case 'win':\n        return '#28a745';\n      case 'loss':\n        return '#dc3545';\n      case 'draw':\n        return '#ffc107';\n      default:\n        return '#6c757d';\n    }\n  },\n  // Helper function to format date\n  formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","statsService","getUserStats","get","data","getRecentGames","limit","getLeaderboard","getDetailedStats","formatWinPercentage","percentage","toFixed","getGameResultText","result","getGameResultColor","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute"],"sources":["/Users/yousuf/Downloads/tic-tac-toe-engine/react-web-app/src/services/statsService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if available\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Handle token expiration\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const statsService = {\n  // Get user's statistics\n  async getUserStats() {\n    const response = await apiClient.get('/stats/my-stats');\n    return response.data;\n  },\n\n  // Get user's recent games\n  async getRecentGames(limit = 10) {\n    const response = await apiClient.get(`/stats/recent-games?limit=${limit}`);\n    return response.data;\n  },\n\n  // Get global leaderboard\n  async getLeaderboard(limit = 10) {\n    const response = await apiClient.get(`/stats/leaderboard?limit=${limit}`);\n    return response.data;\n  },\n\n  // Get detailed statistics\n  async getDetailedStats() {\n    const response = await apiClient.get('/stats/detailed-stats');\n    return response.data;\n  },\n\n  // Helper function to format win percentage\n  formatWinPercentage(percentage) {\n    return `${percentage.toFixed(1)}%`;\n  },\n\n  // Helper function to get game result text\n  getGameResultText(result) {\n    switch (result) {\n      case 'win':\n        return 'Won';\n      case 'loss':\n        return 'Lost';\n      case 'draw':\n        return 'Draw';\n      default:\n        return 'Unknown';\n    }\n  },\n\n  // Helper function to get game result color\n  getGameResultColor(result) {\n    switch (result) {\n      case 'win':\n        return '#28a745';\n      case 'loss':\n        return '#dc3545';\n      case 'draw':\n        return '#ffc107';\n      default:\n        return '#6c757d';\n    }\n  },\n\n  // Helper function to format date\n  formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  },\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;;AAE5D;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,SAAS,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMU,YAAY,GAAG;EAC1B;EACA,MAAMC,YAAYA,CAAA,EAAG;IACnB,MAAMR,QAAQ,GAAG,MAAMf,SAAS,CAACwB,GAAG,CAAC,iBAAiB,CAAC;IACvD,OAAOT,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED;EACA,MAAMC,cAAcA,CAACC,KAAK,GAAG,EAAE,EAAE;IAC/B,MAAMZ,QAAQ,GAAG,MAAMf,SAAS,CAACwB,GAAG,CAAC,6BAA6BG,KAAK,EAAE,CAAC;IAC1E,OAAOZ,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED;EACA,MAAMG,cAAcA,CAACD,KAAK,GAAG,EAAE,EAAE;IAC/B,MAAMZ,QAAQ,GAAG,MAAMf,SAAS,CAACwB,GAAG,CAAC,4BAA4BG,KAAK,EAAE,CAAC;IACzE,OAAOZ,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED;EACA,MAAMI,gBAAgBA,CAAA,EAAG;IACvB,MAAMd,QAAQ,GAAG,MAAMf,SAAS,CAACwB,GAAG,CAAC,uBAAuB,CAAC;IAC7D,OAAOT,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED;EACAK,mBAAmBA,CAACC,UAAU,EAAE;IAC9B,OAAO,GAAGA,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,GAAG;EACpC,CAAC;EAED;EACAC,iBAAiBA,CAACC,MAAM,EAAE;IACxB,QAAQA,MAAM;MACZ,KAAK,KAAK;QACR,OAAO,KAAK;MACd,KAAK,MAAM;QACT,OAAO,MAAM;MACf,KAAK,MAAM;QACT,OAAO,MAAM;MACf;QACE,OAAO,SAAS;IACpB;EACF,CAAC;EAED;EACAC,kBAAkBA,CAACD,MAAM,EAAE;IACzB,QAAQA,MAAM;MACZ,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,MAAM;QACT,OAAO,SAAS;MAClB,KAAK,MAAM;QACT,OAAO,SAAS;MAClB;QACE,OAAO,SAAS;IACpB;EACF,CAAC;EAED;EACAE,UAAUA,CAACC,UAAU,EAAE;IACrB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;IACjC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;MACtCC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,OAAO;MACdC,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}